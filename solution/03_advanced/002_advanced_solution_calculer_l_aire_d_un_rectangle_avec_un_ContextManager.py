class Rectangle:
    def __init__(self, longueur, largeur):
        self.longueur = longueur
        self.largeur = largeur
        
    def __enter__(self):
        print(f"L'aire d'un rectangle de {self.longueur}m par {self.largeur}m "
              f"est de :")
        return self
        
    def __exit__(self, exception_type, exception_value, callback):
        print(f"{self.aire} m2")
    
    def calcul_aire(self):
        self.aire = self.longueur * self.largeur


with Rectangle(6, 12) as r:
    r.calcul_aire()


"""'
Calculer l'aire d'un rectangle avec un ContextManager - Solution

CODE:
    class Rectangle:
        def __init__(self, longueur, largeur):
            self.longueur = longueur
            self.largeur = largeur
            
    def __enter__(self):
        print(f"L'aire d'un rectangle de {self.longueur}m par {self.largeur}m "
              f"est de :")
        return self
        
    def __exit__(self, exception_type, exception_value, callback):
        print(f"{self.aire} m2")
    
    def calcul_aire(self):
        self.aire = self.longueur * self.largeur
     
    with Rectangle(6, 12) as r:
        r.calcul_aire()

EXPLICATIONS:
    La premi√®re chose √† faire √©tait d'impl√©menter la m√©thode calcul_aire :

    def calcul_aire(self):
        self.aire = self.longueur * self.largeur
    Cette m√©thode est tr√®s simple et retourne l'aire du rectangle dans un 
    attribut aire.
    Maintenant, pour pouvoir utiliser l'instruction with, il fallait 
    impl√©menter un contextmanager.
    Pour ce faire, on utilise les deux m√©thodes sp√©ciales __enter__ et __exit__.
    La m√©thode __enter__ est appel√©e au d√©but du contexte et la m√©thode 
    __exit__ √† sa sortie.
    Pour la m√©thode __enter__, on voulait juste annoncer le fait qu'on 
    s'appr√™te √† calculer l'aire du rectangle. Un simple print suffisait donc:
    def __enter__(self):
        print("L'aire d'un rectangle de {}m par {}m est de :".format(self.longueur, self.largeur))
        return self
    Il ne faut cependant pas oublier de retourner self puisque c'est la valeur
    que l'on retourne dans la m√©thode __enter__ qui sera r√©cup√©r√©e dans notre
    cas par la variable r lors de l'instruction with:
    with Rectangle(6, 12) as r:
        r.calcul_aire()
    √Ä l'int√©rieur du bloc d'instruction, on appelle la m√©thode calcul_aire 
    afin de r√©cup√©rer le r√©sultat du calcul dans l'attribut aire.
    On peut ensuite afficher ce r√©sultat √† la sortie du contextmanager, dans
    la m√©thode __exit__:
    def __exit__(self, exception_type, exception_value, callback):
        print("{}m2".format(self.aire))
    La m√©thode __exit__ doit obligatoirement poss√©der trois param√®tres pour 
    recueillir les informations pertinentes en cas d'erreur.
    üëâ Le nom des param√®tres n'a pas d'importance, ce qui compte c'est bien 
    d'en avoir trois, mais vous pourriez les appeler autrement et √ßa 
    fonctionnerait √©galement.

POINTS IMPORTANTS √Ä RETENIR:
    Pour impl√©menter un contextmanager, on utilise les m√©thodes __enter__ et 
    __exit__.
    Le contextemanager d'une classe est appel√© automatiquement quand on 
    utilise l'instruction with.
"""